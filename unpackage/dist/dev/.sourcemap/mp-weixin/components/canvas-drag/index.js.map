{"version":3,"sources":[null,"webpack:///C:/Users/zhangjing/Documents/HBuilderProjects/小程序组件-canvas拖拽组件示例/components/canvas-drag/index.vue?e602","webpack:///C:/Users/zhangjing/Documents/HBuilderProjects/小程序组件-canvas拖拽组件示例/components/canvas-drag/index.vue?474f","webpack:///C:/Users/zhangjing/Documents/HBuilderProjects/小程序组件-canvas拖拽组件示例/components/canvas-drag/index.vue?9f84","uni-app:///components/canvas-drag/index.vue","webpack:///C:/Users/zhangjing/Documents/HBuilderProjects/小程序组件-canvas拖拽组件示例/components/canvas-drag/index.vue?c941","webpack:///C:/Users/zhangjing/Documents/HBuilderProjects/小程序组件-canvas拖拽组件示例/components/canvas-drag/index.vue?1e8c"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkH;AAClH;AACyD;AACL;AACa;;;AAGjE;AACoM;AACpM,gBAAgB,yMAAU;AAC1B,EAAE,2EAAM;AACR,EAAE,gFAAM;AACR,EAAE,yFAAe;AACjB;AACA;AACA;AACA;AACA;AACA,EAAE,oFAAU;AACZ;AACA;;AAEA;AACe,gF;;;;;;;;;;;;ACvBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAA0vB,CAAgB,2vBAAG,EAAC,C;;;;;;;;;;;;;;;;;;;;;;;;ACY9wB,4E;;;;;;;;;;;AACA,0BAEA,aAUA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAFA,MAEA;AACA;AACA;AACA,gBADA;AAEA,eAFA,mBAEA,GAFA,EAEA;AACA;AACA;AACA,SALA;AAMA,YANA,gBAMA,GANA,EAMA;AACA;AACA,SARA;;AAUA;AACA,GAhBA;AAiBA;AACA;AACA,mE,CAAA;AACA;AACA,iE,CAAA;AACA;AACA;AACA;AACA,mB,CAAA;AACA;AACA,uB,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GARA,MAQA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAjBA,CAiBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhCA;AAiCA;AACA;;;AAGA,OAJA,mBAIA;AACA,oBADA,CACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sCANA,CAMA;;AAEA;AACA;AACA,KAhBA,CAgBA;;AAEA;AACA;AACA,qDApBA,CAoBA;;AAEA;AACA;AACA,KAFA,MAEA;AACA;AACA,KA1BA,CA0BA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAJA,MAIA;AA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;AACA;AACA;AACA,oEAJA,CAIA;;AAEA;AACA;AACA,4EARA,CAQA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAHA,MAGA;AACA;AACA;AACA,KAHA,MAGA;AACA;AACA,KAvCA,CAuCA;;AAEA;AACA,GAhLA;;AAkLA;;;;;;AAMA,eAxLA,yBAwLA,MAxLA,EAwLA,SAxLA,EAwLA;AACA;AACA,oBADA;AAEA;;AAEA;AACA;AACA,uBADA;AAEA;AACA,uBADA;AAEA;AACA;AACA;;AAEA;AACA,GAvMA;;AAyMA;;;;AAIA,eA7MA,2BA6MA;AACA;AACA,8EADA;AAEA,uFAFA;AAGA,gGAHA;AAIA,uFAJA;;AAMA,GApNA;;AAsNA;;;;;;;;;;AAUA,cAhOA,wBAgOA,CAhOA,EAgOA,CAhOA,EAgOA,OAhOA,EAgOA,OAhOA,EAgOA,OAhOA,EAgOA;AACA;AACA;AACA;AACA,GApOA;;AAsOA;;;;;;;;AAQA,WA9OA,qBA8OA,EA9OA,EA8OA,EA9OA,EA8OA,CA9OA,EA8OA,CA9OA,EA8OA,YA9OA,EA8OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BALA,CAKA;;AAEA;AACA;AACA,KATA,MASA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wEArBA,CAqBA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAHA,MAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAjBA,MAiBA;AACA;AACA,mFAFA,CAEA;;AAEA;AACA;AACA;AACA;AACA,4BARA,CAQA;;AAEA;AACA;AACA;AACA,GA1SA;;AA4SA,MA5SA,gBA4SA,GA5SA,EA4SA;AACA;AACA,GA9SA;;AAgTA,aAhTA,yBAgTA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GA3TA;;AA6TA,SA7TA,qBA6TA;AACA;AACA,sBADA,EACA;AACA;AACA;AACA;AACA;AACA;AACA,OAPA;;AASA;AACA,oBADA,EACA;AACA;AACA;AACA;AACA;AACA;AACA,OAPA;;AASA,GAhVA;;AAkVA;AACA,QADA,gBACA,GADA,EACA;AACA;AACA,KAHA;;AAKA,UALA,oBAKA;AACA;AACA;AACA;AACA,KATA;;AAWA,eAXA,yBAWA;AACA;AACA,KAbA;;AAeA,iBAfA,2BAeA;AACA;AACA;AACA;;AAEA;AACA,UADA,CACA;AACA;AACA,OAHA;AAIA,WAJA,CAIA;AACA;AACA,OANA;AAOA,KA3BA;;AA6BA,QA7BA,kBA6BA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAJA,MAIA;AACA;AACA;AACA,KA1CA;;AA4CA,iBA5CA,yBA4CA,CA5CA,EA4CA,CA5CA,EA4CA;AACA;AACA;AACA;AACA;AACA;AACA,SAFA;AAGA;AACA;AACA;AACA;AACA;AACA,aADA;AAEA,aAFA,EADA;;AAKA,OALA,CADA;;AAQA,cARA;AASA,iBATA,CADA;;;AAaA,kBArBA,CAqBA;;AAEA;AACA,KApEA;;AAsEA,aAtEA,qBAsEA,MAtEA,EAsEA;AACA,wBADA,CACA;;AAEA,oBAHA,CAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAFA,MAEA;AACA;AACA;;AAEA;AACA,kBA1BA;;AA4BA,OA7BA;AA8BA;AACA,KA3GA;;AA6GA,QA7GA,kBA6GA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAFA;AAGA;AACA;AACA;AACA,SAFA;AAGA,OAJA;AAKA,KAjIA;;AAmIA,SAnIA,iBAmIA,CAnIA,EAmIA;AACA,qBADA,CACA;AADA;AAGA,kBAHA,CAGA,CAHA,eAGA,CAHA,CAGA,CAHA,eAGA,CAHA;AAIA;AACA,8BALA,CAKA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yCAFA,CAEA;;AAEA;AACA,gBADA;AAEA,gBAFA;;;AAKA;AACA,iCADA,CACA;AACA;AACA;AACA,SAbA,MAaA;AACA;AACA;AACA;AACA,OApBA,CADA,CAPA,CA4BA;;AAEA;AACA;AACA,uDADA,CACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aALA,MAKA;AACA;AACA;AACA;AACA,WAXA,MAWA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAzLA;;AA2LA,QA3LA,gBA2LA,CA3LA,EA2LA;AACA,kBADA,CACA,CADA,gBACA,CADA,CACA,CADA,gBACA,CADA;;AAGA;AACA,sBADA,CACA;;AAEA;;AAEA;AACA;AACA,uFAFA,CAEA;;AAEA;AACA;AACA;AACA;AACA,SARA,MAQA;AACA;AACA,SAfA,CAeA;;AAEA;;AAEA;AACA;AACA,KAnNA;;AAqNA,OArNA,eAqNA,CArNA,EAqNA;AACA;;AAEA;AACA,uBADA,CACA;AACA;;AAEA;AACA;AACA,KA9NA;;AAgOA,aAhOA,uBAgOA;AACA;AACA;AACA;AACA;AACA,SAHA;AAIA;AACA;AACA;AACA,mCADA;AAEA;AACA;AACA,aAJA;AAKA;AACA;AACA,aAPA,EADA;;AAUA,gBAVA;;AAYA,SAbA;AAcA,OAnBA;AAoBA,KArPA;;AAuPA,cAvPA,wBAuPA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BADA;AAEA,iCAFA;AAGA,yBAHA;AAIA,yBAJA;AAKA,yBALA;AAMA,yBANA;AAOA,mCAPA;AAQA,uCARA;;AAUA;;AAEA;AACA;AACA,4BADA;AAEA,+BAFA;AAGA,iCAHA;AAIA,uCAJA;AAKA,yBALA;AAMA,yBANA;AAOA,yBAPA;AAQA,yBARA;AASA,mCATA;;AAWA,oBA1BA;;AA4BA,SA/BA;;AAiCA;AACA;AACA,2BADA;AAEA,+BAFA;;;AAKA;AACA;AACA;;AAEA;AACA,SAXA,MAWA;AACA;AACA,2BADA;AAEA,iCAFA;;AAIA;;AAEA;AACA,OArDA;AAsDA,KA9SA;;AAgTA,cAhTA,sBAgTA,KAhTA,EAgTA;AACA;;AAEA;AACA;AACA;;AAEA,kBAPA,CAOA;;AAEA;AACA,KA1TA;;AA4TA,iBA5TA,yBA4TA,KA5TA,EA4TA;AACA;AACA;AACA,kBAHA,CAGA;;AAEA;AACA,KAlUA;;AAoUA,iBApUA,yBAoUA,QApUA,EAoUA;AACA;AACA;AACA;AACA;AACA;AACA,wBAFA,CAEA;;AAEA;AACA,SALA;AAMA;AACA,OATA,MASA;AACA;AACA;AACA;AACA,wBAFA,CAEA;;AAEA;AACA,SALA;AAMA;AACA,KAxVA;;AA0VA,eA1VA,yBA0VA;AACA;AACA;AACA;AACA,oBAJA,CAIA;;AAEA,yBANA,CAMA;AACA,KAjWA,EAlVA,E;;;;;;;;;;;;;ACnWA;AAAA;AAAA;AAAA;AAA0kC,CAAgB,wiCAAG,EAAC,C;;;;;;;;;;;ACA9lC;AACA,OAAO,KAAU,EAAE,kBAKd","file":"components/canvas-drag/index.js","sourcesContent":["import { render, staticRenderFns, recyclableRender, components } from \"./index.vue?vue&type=template&id=5cd633be&\"\nvar renderjs\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\nimport style0 from \"./index.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\runtime\\\\componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"components/canvas-drag/index.vue\"\nexport default component.exports","export * from \"-!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\templateLoader.js??vue-loader-options!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--16-0!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\template.js!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-uni-app-loader\\\\page-meta.js!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./index.vue?vue&type=template&id=5cd633be&\"","var components\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import mod from \"-!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--12-1!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\script.js!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--12-1!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\script.js!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./index.vue?vue&type=script&lang=js&\"","<template>\r\n\t<canvas\r\n\t\tcanvas-id=\"canvas-drag\"\r\n\t\tdisable-scroll=\"true\"\r\n\t\t@touchstart=\"start\"\r\n\t\t@touchmove=\"move\"\r\n\t\t@touchend=\"end\"\r\n\t\t:style=\"'width: ' + width + 'rpx; height: ' + height + 'rpx;'\"\r\n\t></canvas>\r\n</template>\r\n\r\n<script>\r\nimport _app from './app.js';\r\nfunction checkMPUrl(url) {\r\n\t// #ifdef MP\r\n\tif (process.env.NODE_ENV !== 'development') {\r\n\t\tif (\r\n\t\t\turl.substring(0, 4) === 'http' &&\r\n\t\t\turl.substring(0, 5) !== 'https' &&\r\n\t\t\turl.substring(0, 12) !== 'http://store' &&\r\n\t\t\turl.substring(0, 10) !== 'http://tmp' &&\r\n\t\t\turl.substring(0, 10) !== 'http://usr'\r\n\t\t) {\r\n\t\t\turl = 'https' + url.substring(4, url.length);\r\n\t\t}\r\n\t}\r\n\t// #endif\r\n\treturn url;\r\n}\r\nfunction downloadFile_PromiseFc(url) {\r\n\treturn new Promise((rs, rj) => {\r\n\t\tif (url.substring(0, 4) !== 'http') {\r\n\t\t\trs(url);\r\n\t\t} else {\r\n\t\t\turl = checkMPUrl(url);\r\n\t\t\tuni.downloadFile({\r\n\t\t\t\turl,\r\n\t\t\t\tsuccess(res) {\r\n\t\t\t\t\tif (res && res.tempFilePath) rs(res.tempFilePath);\r\n\t\t\t\t\telse rj('not find tempFilePath');\r\n\t\t\t\t},\r\n\t\t\t\tfail(err) {\r\n\t\t\t\t\trj(err);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n}\r\n// components/canvas-drag/index.js\r\nlet DELETE_ICON = 'https://oss.123tool.cn/client/canvas/close.png'; // 删除按钮\r\n// 删除按钮\r\nlet DRAG_ICON = 'https://oss.123tool.cn/client/canvas/scale.png'; // 缩放按钮\r\n// 缩放按钮\r\nconst STROKE_COLOR = 'red';\r\nconst ROTATE_ENABLED = true;\r\nlet isMove = false; // 标识触摸后是否有移动，用来判断是否需要增加操作历史\r\n// 标识触摸后是否有移动，用来判断是否需要增加操作历史\r\nconst DEBUG_MODE = false; // 打开调试后会渲染操作区域边框（无背景时有效）\r\n// 打开调试后会渲染操作区域边框（无背景时有效）\r\nconst dragGraph = function({ x = 30, y = 30, w, h, type, text, fontSize = 20, color = 'red', url = null, rotate = 0, sourceId = null, selected = true }, canvas, factor) {\r\n\tif (type === 'text') {\r\n\t\tcanvas.setFontSize(fontSize);\r\n\t\tconst textWidth = canvas.measureText(text).width;\r\n\t\tconst textHeight = fontSize + 10;\r\n\t\tthis.centerX = x + textWidth / 2;\r\n\t\tthis.centerY = y + textHeight / 2;\r\n\t\tthis.w = textWidth;\r\n\t\tthis.h = textHeight;\r\n\t} else {\r\n\t\tthis.centerX = x + w / 2;\r\n\t\tthis.centerY = y + h / 2;\r\n\t\tthis.w = w;\r\n\t\tthis.h = h;\r\n\t}\r\n\r\n\tthis.x = x;\r\n\tthis.y = y; // 4个顶点坐标\r\n\r\n\tthis.square = [[this.x, this.y], [this.x + this.w, this.y], [this.x + this.w, this.y + this.h], [this.x, this.y + this.h]];\r\n\tthis.fileUrl = url;\r\n\tthis.text = text;\r\n\tthis.fontSize = fontSize;\r\n\tthis.color = color;\r\n\tthis.ctx = canvas;\r\n\tthis.rotate = rotate;\r\n\tthis.type = type;\r\n\tthis.selected = selected;\r\n\tthis.factor = factor;\r\n\tthis.sourceId = sourceId;\r\n\tthis.MIN_WIDTH = 20;\r\n\tthis.MIN_FONTSIZE = 10;\r\n};\r\ndragGraph.prototype = {\r\n\t/**\r\n\t * 绘制元素\r\n\t */\r\n\tpaint() {\r\n\t\tthis.ctx.save(); // 由于measureText获取文字宽度依赖于样式，所以如果是文字元素需要先设置样式\r\n\r\n\t\tlet textWidth = 0;\r\n\t\tlet textHeight = 0;\r\n\r\n\t\tif (this.type === 'text') {\r\n\t\t\tthis.ctx.setFontSize(this.fontSize);\r\n\t\t\tthis.ctx.setTextBaseline('middle');\r\n\t\t\tthis.ctx.setTextAlign('center');\r\n\t\t\tthis.ctx.setFillStyle(this.color);\r\n\t\t\ttextWidth = this.ctx.measureText(this.text).width;\r\n\t\t\ttextHeight = this.fontSize + 10; // 字体区域中心点不变，左上角位移\r\n\r\n\t\t\tthis.x = this.centerX - textWidth / 2;\r\n\t\t\tthis.y = this.centerY - textHeight / 2;\r\n\t\t} // 旋转元素\r\n\r\n\t\tthis.ctx.translate(this.centerX, this.centerY);\r\n\t\tthis.ctx.rotate((this.rotate * Math.PI) / 180);\r\n\t\tthis.ctx.translate(-this.centerX, -this.centerY); // 渲染元素\r\n\r\n\t\tif (this.type === 'text') {\r\n\t\t\tthis.ctx.fillText(this.text, this.centerX, this.centerY);\r\n\t\t} else if (this.type === 'image') {\r\n\t\t\tthis.ctx.drawImage(this.fileUrl, this.x, this.y, this.w, this.h);\r\n\t\t} // 如果是选中状态，绘制选择虚线框，和缩放图标、删除图标\r\n\r\n\t\tif (this.selected) {\r\n\t\t\tthis.ctx.setLineDash([2, 5]);\r\n\t\t\tthis.ctx.setLineWidth(2);\r\n\t\t\tthis.ctx.setStrokeStyle(STROKE_COLOR);\r\n\t\t\tthis.ctx.lineDashOffset = 6;\r\n\r\n\t\t\tif (this.type === 'text') {\r\n\t\t\t\tthis.ctx.strokeRect(this.x, this.y, textWidth, textHeight);\r\n\t\t\t\tthis.ctx.drawImage(DELETE_ICON, this.x - 15, this.y - 15, 30, 30);\r\n\t\t\t\tthis.ctx.drawImage(DRAG_ICON, this.x + textWidth - 15, this.y + textHeight - 15, 30, 30);\r\n\t\t\t} else {\r\n\t\t\t\tthis.ctx.strokeRect(this.x, this.y, this.w, this.h);\r\n\t\t\t\tthis.ctx.drawImage(DELETE_ICON, this.x - 15, this.y - 15, 30, 30);\r\n\t\t\t\tthis.ctx.drawImage(DRAG_ICON, this.x + this.w - 15, this.y + this.h - 15, 30, 30);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.ctx.restore();\r\n\t},\r\n\r\n\t/**\r\n\t * 给矩形描边\r\n\t * @private\r\n\t */\r\n\t_drawBorder() {\r\n\t\tlet p = this.square;\r\n\t\tlet ctx = this.ctx;\r\n\t\tthis.ctx.save();\r\n\t\tthis.ctx.beginPath();\r\n\t\tctx.setStrokeStyle('orange');\r\n\r\n\t\tthis._draw_line(this.ctx, p[0], p[1]);\r\n\r\n\t\tthis._draw_line(this.ctx, p[1], p[2]);\r\n\r\n\t\tthis._draw_line(this.ctx, p[2], p[3]);\r\n\r\n\t\tthis._draw_line(this.ctx, p[3], p[0]);\r\n\r\n\t\tctx.restore();\r\n\t},\r\n\r\n\t/**\r\n\t * 画一条线\r\n\t * @param ctx\r\n\t * @param a\r\n\t * @param b\r\n\t * @private\r\n\t */\r\n\t_draw_line(ctx, a, b) {\r\n\t\tctx.moveTo(a[0], a[1]);\r\n\t\tctx.lineTo(b[0], b[1]);\r\n\t\tctx.stroke();\r\n\t},\r\n\r\n\t/**\r\n\t * 判断点击的坐标落在哪个区域\r\n\t * @param {*} x 点击的坐标\r\n\t * @param {*} y 点击的坐标\r\n\t */\r\n\tisInGraph(x, y) {\r\n\t\t// 删除区域左上角的坐标和区域的高度宽度\r\n\t\tconst delW = 30;\r\n\t\tconst delH = 30; // 旋转后的删除区域坐标\r\n\r\n\t\tconst transformedDelCenter = this._rotatePoint(this.x, this.y, this.centerX, this.centerY, this.rotate);\r\n\r\n\t\tconst transformDelX = transformedDelCenter[0] - delW / 2;\r\n\t\tconst transformDelY = transformedDelCenter[1] - delH / 2; // 变换区域左上角的坐标和区域的高度宽度\r\n\r\n\t\tconst scaleW = 30;\r\n\t\tconst scaleH = 30;\r\n\r\n\t\tconst transformedScaleCenter = this._rotatePoint(this.x + this.w, this.y + this.h, this.centerX, this.centerY, this.rotate); // 旋转后的变换区域坐标\r\n\r\n\t\tconst transformScaleX = transformedScaleCenter[0] - scaleW / 2;\r\n\t\tconst transformScaleY = transformedScaleCenter[1] - scaleH / 2; // 调试使用，标识可操作区域\r\n\r\n\t\tif (DEBUG_MODE) {\r\n\t\t\t// 标识删除按钮区域\r\n\t\t\tthis.ctx.setLineWidth(1);\r\n\t\t\tthis.ctx.setStrokeStyle('red');\r\n\t\t\tthis.ctx.strokeRect(transformDelX, transformDelY, delW, delH); // 标识旋转/缩放按钮区域\r\n\r\n\t\t\tthis.ctx.setLineWidth(1);\r\n\t\t\tthis.ctx.setStrokeStyle('black');\r\n\t\t\tthis.ctx.strokeRect(transformScaleX, transformScaleY, scaleW, scaleH); // 标识移动区域\r\n\r\n\t\t\tthis._drawBorder();\r\n\t\t}\r\n\r\n\t\tif (x - transformScaleX >= 0 && y - transformScaleY >= 0 && transformScaleX + scaleW - x >= 0 && transformScaleY + scaleH - y >= 0) {\r\n\t\t\t// 缩放区域\r\n\t\t\treturn 'transform';\r\n\t\t} else if (x - transformDelX >= 0 && y - transformDelY >= 0 && transformDelX + delW - x >= 0 && transformDelY + delH - y >= 0) {\r\n\t\t\t// 删除区域\r\n\t\t\treturn 'del';\r\n\t\t} else if (this.insidePolygon(this.square, [x, y])) {\r\n\t\t\treturn 'move';\r\n\t\t} // 不在选择区域里面\r\n\r\n\t\treturn false;\r\n\t},\r\n\r\n\t/**\r\n\t *  判断一个点是否在多边形内部\r\n\t *  @param points 多边形坐标集合\r\n\t *  @param testPoint 测试点坐标\r\n\t *  返回true为真，false为假\r\n\t *  */\r\n\tinsidePolygon(points, testPoint) {\r\n\t\tlet x = testPoint[0],\r\n\t\t\ty = testPoint[1];\r\n\t\tlet inside = false;\r\n\r\n\t\tfor (let i = 0, j = points.length - 1; i < points.length; j = i++) {\r\n\t\t\tlet xi = points[i][0],\r\n\t\t\t\tyi = points[i][1];\r\n\t\t\tlet xj = points[j][0],\r\n\t\t\t\tyj = points[j][1];\r\n\t\t\tlet intersect = yi > y != yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\r\n\t\t\tif (intersect) inside = !inside;\r\n\t\t}\r\n\r\n\t\treturn inside;\r\n\t},\r\n\r\n\t/**\r\n\t * 计算旋转后矩形四个顶点的坐标（相对于画布）\r\n\t * @private\r\n\t */\r\n\t_rotateSquare() {\r\n\t\tthis.square = [\r\n\t\t\tthis._rotatePoint(this.x, this.y, this.centerX, this.centerY, this.rotate),\r\n\t\t\tthis._rotatePoint(this.x + this.w, this.y, this.centerX, this.centerY, this.rotate),\r\n\t\t\tthis._rotatePoint(this.x + this.w, this.y + this.h, this.centerX, this.centerY, this.rotate),\r\n\t\t\tthis._rotatePoint(this.x, this.y + this.h, this.centerX, this.centerY, this.rotate)\r\n\t\t];\r\n\t},\r\n\r\n\t/**\r\n\t * 计算旋转后的新坐标（相对于画布）\r\n\t * @param x\r\n\t * @param y\r\n\t * @param centerX\r\n\t * @param centerY\r\n\t * @param degrees\r\n\t * @returns {*[]}\r\n\t * @private\r\n\t */\r\n\t_rotatePoint(x, y, centerX, centerY, degrees) {\r\n\t\tlet newX = (x - centerX) * Math.cos((degrees * Math.PI) / 180) - (y - centerY) * Math.sin((degrees * Math.PI) / 180) + centerX;\r\n\t\tlet newY = (x - centerX) * Math.sin((degrees * Math.PI) / 180) + (y - centerY) * Math.cos((degrees * Math.PI) / 180) + centerY;\r\n\t\treturn [newX, newY];\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t * @param {*} px 手指按下去的坐标\r\n\t * @param {*} py 手指按下去的坐标\r\n\t * @param {*} x 手指移动到的坐标\r\n\t * @param {*} y 手指移动到的坐标\r\n\t * @param {*} currentGraph 当前图层的信息\r\n\t */\r\n\ttransform(px, py, x, y, currentGraph) {\r\n\t\t// 获取选择区域的宽度高度\r\n\t\tif (this.type === 'text') {\r\n\t\t\tthis.ctx.setFontSize(this.fontSize);\r\n\t\t\tconst textWidth = this.ctx.measureText(this.text).width;\r\n\t\t\tconst textHeight = this.fontSize + 10;\r\n\t\t\tthis.w = textWidth;\r\n\t\t\tthis.h = textHeight; // 字体区域中心点不变，左上角位移\r\n\r\n\t\t\tthis.x = this.centerX - textWidth / 2;\r\n\t\t\tthis.y = this.centerY - textHeight / 2;\r\n\t\t} else {\r\n\t\t\tthis.centerX = this.x + this.w / 2;\r\n\t\t\tthis.centerY = this.y + this.h / 2;\r\n\t\t}\r\n\r\n\t\tconst diffXBefore = px - this.centerX;\r\n\t\tconst diffYBefore = py - this.centerY;\r\n\t\tconst diffXAfter = x - this.centerX;\r\n\t\tconst diffYAfter = y - this.centerY;\r\n\t\tconst angleBefore = (Math.atan2(diffYBefore, diffXBefore) / Math.PI) * 180;\r\n\t\tconst angleAfter = (Math.atan2(diffYAfter, diffXAfter) / Math.PI) * 180; // 旋转的角度\r\n\r\n\t\tif (ROTATE_ENABLED) {\r\n\t\t\tthis.rotate = currentGraph.rotate + angleAfter - angleBefore;\r\n\t\t}\r\n\r\n\t\tconst lineA = Math.sqrt(Math.pow(this.centerX - px, 2) + Math.pow(this.centerY - py, 2));\r\n\t\tconst lineB = Math.sqrt(Math.pow(this.centerX - x, 2) + Math.pow(this.centerY - y, 2));\r\n\r\n\t\tif (this.type === 'image') {\r\n\t\t\tlet resize_rito = lineB / lineA;\r\n\t\t\tlet new_w = currentGraph.w * resize_rito;\r\n\t\t\tlet new_h = currentGraph.h * resize_rito;\r\n\r\n\t\t\tif (currentGraph.w < currentGraph.h && new_w < this.MIN_WIDTH) {\r\n\t\t\t\tnew_w = this.MIN_WIDTH;\r\n\t\t\t\tnew_h = (this.MIN_WIDTH * currentGraph.h) / currentGraph.w;\r\n\t\t\t} else if (currentGraph.h < currentGraph.w && new_h < this.MIN_WIDTH) {\r\n\t\t\t\tnew_h = this.MIN_WIDTH;\r\n\t\t\t\tnew_w = (this.MIN_WIDTH * currentGraph.w) / currentGraph.h;\r\n\t\t\t}\r\n\r\n\t\t\tthis.w = new_w;\r\n\t\t\tthis.h = new_h;\r\n\t\t\tthis.x = currentGraph.x - (new_w - currentGraph.w) / 2;\r\n\t\t\tthis.y = currentGraph.y - (new_h - currentGraph.h) / 2;\r\n\t\t} else if (this.type === 'text') {\r\n\t\t\tconst fontSize = currentGraph.fontSize * ((lineB - lineA) / lineA + 1);\r\n\t\t\tthis.fontSize = fontSize <= this.MIN_FONTSIZE ? this.MIN_FONTSIZE : fontSize; // 旋转位移后重新计算坐标\r\n\r\n\t\t\tthis.ctx.setFontSize(this.fontSize);\r\n\t\t\tconst textWidth = this.ctx.measureText(this.text).width;\r\n\t\t\tconst textHeight = this.fontSize + 10;\r\n\t\t\tthis.w = textWidth;\r\n\t\t\tthis.h = textHeight; // 字体区域中心点不变，左上角位移\r\n\r\n\t\t\tthis.x = this.centerX - textWidth / 2;\r\n\t\t\tthis.y = this.centerY - textHeight / 2;\r\n\t\t}\r\n\t},\r\n\r\n\ttoPx(rpx) {\r\n\t\treturn rpx * this.factor;\r\n\t}\r\n};\r\n\r\nexport default {\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tbgImage: '',\r\n\t\t\thistory: [],\r\n\t\t\tbgColor: {\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: ''\r\n\t\t\t},\r\n\t\t\tbgSourceId: {\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: ''\r\n\t\t\t}\r\n\t\t};\r\n\t},\r\n\r\n\tcomponents: {},\r\n\tprops: {\r\n\t\tgraph: {\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: () => ({})\r\n\t\t},\r\n\r\n\t\twidth: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 750\r\n\t\t},\r\n\t\theight: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 750\r\n\t\t},\r\n\t\tenableUndo: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false\r\n\t\t}\r\n\t},\r\n\twatch: {\r\n\t\tgraph: {\r\n\t\t\thandler: 'onGraphChange',\r\n\t\t\tdeep: true\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t * 绘制元素\r\n\t */\r\n\tpaint() {\r\n\t\tthis.ctx.save(); // 由于measureText获取文字宽度依赖于样式，所以如果是文字元素需要先设置样式\r\n\r\n\t\tlet textWidth = 0;\r\n\t\tlet textHeight = 0;\r\n\r\n\t\tif (this.type === 'text') {\r\n\t\t\tthis.ctx.setFontSize(this.fontSize);\r\n\t\t\tthis.ctx.setTextBaseline('middle');\r\n\t\t\tthis.ctx.setTextAlign('center');\r\n\t\t\tthis.ctx.setFillStyle(this.color);\r\n\t\t\ttextWidth = this.ctx.measureText(this.text).width;\r\n\t\t\ttextHeight = this.fontSize + 10; // 字体区域中心点不变，左上角位移\r\n\r\n\t\t\tthis.x = this.centerX - textWidth / 2;\r\n\t\t\tthis.y = this.centerY - textHeight / 2;\r\n\t\t} // 旋转元素\r\n\r\n\t\tthis.ctx.translate(this.centerX, this.centerY);\r\n\t\tthis.ctx.rotate((this.rotate * Math.PI) / 180);\r\n\t\tthis.ctx.translate(-this.centerX, -this.centerY); // 渲染元素\r\n\r\n\t\tif (this.type === 'text') {\r\n\t\t\tthis.ctx.fillText(this.text, this.centerX, this.centerY);\r\n\t\t} else if (this.type === 'image') {\r\n\t\t\tthis.ctx.drawImage(this.fileUrl, this.x, this.y, this.w, this.h);\r\n\t\t} // 如果是选中状态，绘制选择虚线框，和缩放图标、删除图标\r\n\r\n\t\tif (this.selected) {\r\n\t\t\tthis.ctx.setLineDash([2, 5]);\r\n\t\t\tthis.ctx.setLineWidth(2);\r\n\t\t\tthis.ctx.setStrokeStyle(STROKE_COLOR);\r\n\t\t\tthis.ctx.lineDashOffset = 6;\r\n\r\n\t\t\tif (this.type === 'text') {\r\n\t\t\t\tthis.ctx.strokeRect(this.x, this.y, textWidth, textHeight);\r\n\t\t\t\tthis.ctx.drawImage(DELETE_ICON, this.x - 15, this.y - 15, 30, 30);\r\n\t\t\t\tthis.ctx.drawImage(DRAG_ICON, this.x + textWidth - 15, this.y + textHeight - 15, 30, 30);\r\n\t\t\t} else {\r\n\t\t\t\tthis.ctx.strokeRect(this.x, this.y, this.w, this.h);\r\n\t\t\t\tthis.ctx.drawImage(DELETE_ICON, this.x - 15, this.y - 15, 30, 30);\r\n\t\t\t\tthis.ctx.drawImage(DRAG_ICON, this.x + this.w - 15, this.y + this.h - 15, 30, 30);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.ctx.restore();\r\n\t},\r\n\r\n\t/**\r\n\t * 给矩形描边\r\n\t * @private\r\n\t */\r\n\t_drawBorder() {\r\n\t\tlet p = this.square;\r\n\t\tlet ctx = this.ctx;\r\n\t\tthis.ctx.save();\r\n\t\tthis.ctx.beginPath();\r\n\t\tctx.setStrokeStyle('orange');\r\n\r\n\t\tthis._draw_line(this.ctx, p[0], p[1]);\r\n\r\n\t\tthis._draw_line(this.ctx, p[1], p[2]);\r\n\r\n\t\tthis._draw_line(this.ctx, p[2], p[3]);\r\n\r\n\t\tthis._draw_line(this.ctx, p[3], p[0]);\r\n\r\n\t\tctx.restore();\r\n\t},\r\n\r\n\t/**\r\n\t * 画一条线\r\n\t * @param ctx\r\n\t * @param a\r\n\t * @param b\r\n\t * @private\r\n\t */\r\n\t_draw_line(ctx, a, b) {\r\n\t\tctx.moveTo(a[0], a[1]);\r\n\t\tctx.lineTo(b[0], b[1]);\r\n\t\tctx.stroke();\r\n\t},\r\n\r\n\t/**\r\n\t * 判断点击的坐标落在哪个区域\r\n\t * @param {*} x 点击的坐标\r\n\t * @param {*} y 点击的坐标\r\n\t */\r\n\tisInGraph(x, y) {\r\n\t\t// 删除区域左上角的坐标和区域的高度宽度\r\n\t\tconst delW = 30;\r\n\t\tconst delH = 30; // 旋转后的删除区域坐标\r\n\r\n\t\tconst transformedDelCenter = this._rotatePoint(this.x, this.y, this.centerX, this.centerY, this.rotate);\r\n\r\n\t\tconst transformDelX = transformedDelCenter[0] - delW / 2;\r\n\t\tconst transformDelY = transformedDelCenter[1] - delH / 2; // 变换区域左上角的坐标和区域的高度宽度\r\n\r\n\t\tconst scaleW = 30;\r\n\t\tconst scaleH = 30;\r\n\r\n\t\tconst transformedScaleCenter = this._rotatePoint(this.x + this.w, this.y + this.h, this.centerX, this.centerY, this.rotate); // 旋转后的变换区域坐标\r\n\r\n\t\tconst transformScaleX = transformedScaleCenter[0] - scaleW / 2;\r\n\t\tconst transformScaleY = transformedScaleCenter[1] - scaleH / 2; // 调试使用，标识可操作区域\r\n\r\n\t\tif (DEBUG_MODE) {\r\n\t\t\t// 标识删除按钮区域\r\n\t\t\tthis.ctx.setLineWidth(1);\r\n\t\t\tthis.ctx.setStrokeStyle('red');\r\n\t\t\tthis.ctx.strokeRect(transformDelX, transformDelY, delW, delH); // 标识旋转/缩放按钮区域\r\n\r\n\t\t\tthis.ctx.setLineWidth(1);\r\n\t\t\tthis.ctx.setStrokeStyle('black');\r\n\t\t\tthis.ctx.strokeRect(transformScaleX, transformScaleY, scaleW, scaleH); // 标识移动区域\r\n\r\n\t\t\tthis._drawBorder();\r\n\t\t}\r\n\r\n\t\tif (x - transformScaleX >= 0 && y - transformScaleY >= 0 && transformScaleX + scaleW - x >= 0 && transformScaleY + scaleH - y >= 0) {\r\n\t\t\t// 缩放区域\r\n\t\t\treturn 'transform';\r\n\t\t} else if (x - transformDelX >= 0 && y - transformDelY >= 0 && transformDelX + delW - x >= 0 && transformDelY + delH - y >= 0) {\r\n\t\t\t// 删除区域\r\n\t\t\treturn 'del';\r\n\t\t} else if (this.insidePolygon(this.square, [x, y])) {\r\n\t\t\treturn 'move';\r\n\t\t} // 不在选择区域里面\r\n\r\n\t\treturn false;\r\n\t},\r\n\r\n\t/**\r\n\t *  判断一个点是否在多边形内部\r\n\t *  @param points 多边形坐标集合\r\n\t *  @param testPoint 测试点坐标\r\n\t *  返回true为真，false为假\r\n\t *  */\r\n\tinsidePolygon(points, testPoint) {\r\n\t\tlet x = testPoint[0],\r\n\t\t\ty = testPoint[1];\r\n\t\tlet inside = false;\r\n\r\n\t\tfor (let i = 0, j = points.length - 1; i < points.length; j = i++) {\r\n\t\t\tlet xi = points[i][0],\r\n\t\t\t\tyi = points[i][1];\r\n\t\t\tlet xj = points[j][0],\r\n\t\t\t\tyj = points[j][1];\r\n\t\t\tlet intersect = yi > y != yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\r\n\t\t\tif (intersect) inside = !inside;\r\n\t\t}\r\n\r\n\t\treturn inside;\r\n\t},\r\n\r\n\t/**\r\n\t * 计算旋转后矩形四个顶点的坐标（相对于画布）\r\n\t * @private\r\n\t */\r\n\t_rotateSquare() {\r\n\t\tthis.square = [\r\n\t\t\tthis._rotatePoint(this.x, this.y, this.centerX, this.centerY, this.rotate),\r\n\t\t\tthis._rotatePoint(this.x + this.w, this.y, this.centerX, this.centerY, this.rotate),\r\n\t\t\tthis._rotatePoint(this.x + this.w, this.y + this.h, this.centerX, this.centerY, this.rotate),\r\n\t\t\tthis._rotatePoint(this.x, this.y + this.h, this.centerX, this.centerY, this.rotate)\r\n\t\t];\r\n\t},\r\n\r\n\t/**\r\n\t * 计算旋转后的新坐标（相对于画布）\r\n\t * @param x\r\n\t * @param y\r\n\t * @param centerX\r\n\t * @param centerY\r\n\t * @param degrees\r\n\t * @returns {*[]}\r\n\t * @private\r\n\t */\r\n\t_rotatePoint(x, y, centerX, centerY, degrees) {\r\n\t\tlet newX = (x - centerX) * Math.cos((degrees * Math.PI) / 180) - (y - centerY) * Math.sin((degrees * Math.PI) / 180) + centerX;\r\n\t\tlet newY = (x - centerX) * Math.sin((degrees * Math.PI) / 180) + (y - centerY) * Math.cos((degrees * Math.PI) / 180) + centerY;\r\n\t\treturn [newX, newY];\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t * @param {*} px 手指按下去的坐标\r\n\t * @param {*} py 手指按下去的坐标\r\n\t * @param {*} x 手指移动到的坐标\r\n\t * @param {*} y 手指移动到的坐标\r\n\t * @param {*} currentGraph 当前图层的信息\r\n\t */\r\n\ttransform(px, py, x, y, currentGraph) {\r\n\t\t// 获取选择区域的宽度高度\r\n\t\tif (this.type === 'text') {\r\n\t\t\tthis.ctx.setFontSize(this.fontSize);\r\n\t\t\tconst textWidth = this.ctx.measureText(this.text).width;\r\n\t\t\tconst textHeight = this.fontSize + 10;\r\n\t\t\tthis.w = textWidth;\r\n\t\t\tthis.h = textHeight; // 字体区域中心点不变，左上角位移\r\n\r\n\t\t\tthis.x = this.centerX - textWidth / 2;\r\n\t\t\tthis.y = this.centerY - textHeight / 2;\r\n\t\t} else {\r\n\t\t\tthis.centerX = this.x + this.w / 2;\r\n\t\t\tthis.centerY = this.y + this.h / 2;\r\n\t\t}\r\n\r\n\t\tconst diffXBefore = px - this.centerX;\r\n\t\tconst diffYBefore = py - this.centerY;\r\n\t\tconst diffXAfter = x - this.centerX;\r\n\t\tconst diffYAfter = y - this.centerY;\r\n\t\tconst angleBefore = (Math.atan2(diffYBefore, diffXBefore) / Math.PI) * 180;\r\n\t\tconst angleAfter = (Math.atan2(diffYAfter, diffXAfter) / Math.PI) * 180; // 旋转的角度\r\n\r\n\t\tif (ROTATE_ENABLED) {\r\n\t\t\tthis.rotate = currentGraph.rotate + angleAfter - angleBefore;\r\n\t\t}\r\n\r\n\t\tconst lineA = Math.sqrt(Math.pow(this.centerX - px, 2) + Math.pow(this.centerY - py, 2));\r\n\t\tconst lineB = Math.sqrt(Math.pow(this.centerX - x, 2) + Math.pow(this.centerY - y, 2));\r\n\r\n\t\tif (this.type === 'image') {\r\n\t\t\tlet resize_rito = lineB / lineA;\r\n\t\t\tlet new_w = currentGraph.w * resize_rito;\r\n\t\t\tlet new_h = currentGraph.h * resize_rito;\r\n\r\n\t\t\tif (currentGraph.w < currentGraph.h && new_w < this.MIN_WIDTH) {\r\n\t\t\t\tnew_w = this.MIN_WIDTH;\r\n\t\t\t\tnew_h = (this.MIN_WIDTH * currentGraph.h) / currentGraph.w;\r\n\t\t\t} else if (currentGraph.h < currentGraph.w && new_h < this.MIN_WIDTH) {\r\n\t\t\t\tnew_h = this.MIN_WIDTH;\r\n\t\t\t\tnew_w = (this.MIN_WIDTH * currentGraph.w) / currentGraph.h;\r\n\t\t\t}\r\n\r\n\t\t\tthis.w = new_w;\r\n\t\t\tthis.h = new_h;\r\n\t\t\tthis.x = currentGraph.x - (new_w - currentGraph.w) / 2;\r\n\t\t\tthis.y = currentGraph.y - (new_h - currentGraph.h) / 2;\r\n\t\t} else if (this.type === 'text') {\r\n\t\t\tconst fontSize = currentGraph.fontSize * ((lineB - lineA) / lineA + 1);\r\n\t\t\tthis.fontSize = fontSize <= this.MIN_FONTSIZE ? this.MIN_FONTSIZE : fontSize; // 旋转位移后重新计算坐标\r\n\r\n\t\t\tthis.ctx.setFontSize(this.fontSize);\r\n\t\t\tconst textWidth = this.ctx.measureText(this.text).width;\r\n\t\t\tconst textHeight = this.fontSize + 10;\r\n\t\t\tthis.w = textWidth;\r\n\t\t\tthis.h = textHeight; // 字体区域中心点不变，左上角位移\r\n\r\n\t\t\tthis.x = this.centerX - textWidth / 2;\r\n\t\t\tthis.y = this.centerY - textHeight / 2;\r\n\t\t}\r\n\t},\r\n\r\n\ttoPx(rpx) {\r\n\t\treturn rpx * this.factor;\r\n\t},\r\n\r\n\tbeforeMount() {\r\n\t\tconst sysInfo = wx.getSystemInfoSync();\r\n\t\tconst screenWidth = sysInfo.screenWidth;\r\n\t\tthis.factor = screenWidth / 750;\r\n\r\n\t\tif (typeof this.drawArr === 'undefined') {\r\n\t\t\tthis.drawArr = [];\r\n\t\t}\r\n\r\n\t\tthis.ctx = wx.createCanvasContext('canvas-drag', this);\r\n\t\tthis.draw();\r\n\t},\r\n\r\n\tcreated() {\r\n\t\tuni.downloadFile({\r\n\t\t\turl: DELETE_ICON, //仅为示例，并非真实的资源\r\n\t\t\tsuccess: res => {\r\n\t\t\t\tif (res.statusCode === 200) {\r\n\t\t\t\t\tconsole.log('下载成功：' + res.tempFilePath);\r\n\t\t\t\t\tDELETE_ICON = res.tempFilePath;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tuni.downloadFile({\r\n\t\t\turl: DRAG_ICON, //仅为示例，并非真实的资源\r\n\t\t\tsuccess: res => {\r\n\t\t\t\tif (res.statusCode === 200) {\r\n\t\t\t\t\tconsole.log('下载成功：' + res.tempFilePath);\r\n\t\t\t\t\tDRAG_ICON = res.tempFilePath;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\r\n\tmethods: {\r\n\t\ttoPx(rpx) {\r\n\t\t\treturn rpx * this.factor;\r\n\t\t},\r\n\r\n\t\tinitBg() {\r\n\t\t\tthis.bgColor = '';\r\n\t\t\tthis.bgSourceId = '';\r\n\t\t\tthis.bgImage = '';\r\n\t\t},\r\n\r\n\t\tinitHistory() {\r\n\t\t\tthis.history = [];\r\n\t\t},\r\n\r\n\t\trecordHistory() {\r\n\t\t\tif (!this.enableUndo) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.exportJson()\r\n\t\t\t\t.then(imgArr => {\r\n\t\t\t\t\tthis.history.push(JSON.stringify(imgArr));\r\n\t\t\t\t})\r\n\t\t\t\t.catch(e => {\r\n\t\t\t\t\tconsole.error(e);\r\n\t\t\t\t});\r\n\t\t},\r\n\r\n\t\tundo() {\r\n\t\t\tif (!this.enableUndo) {\r\n\t\t\t\tconsole.log(`后退功能未启用，请设置enableUndo=\"{{true}}\"`);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.history.length > 1) {\r\n\t\t\t\tthis.history.pop();\r\n\t\t\t\tlet newConfigObj = this.history[this.history.length - 1];\r\n\t\t\t\tthis.initByArr(JSON.parse(newConfigObj));\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log('已是第一步，不能回退');\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonGraphChange(n, o) {\r\n\t\t\tif (JSON.stringify(n) === '{}') return;\r\n\t\t\tconsole.log(this.drawArr);\r\n\t\t\tif (n.type == 'image') {\r\n\t\t\t\t_app.downloadFile_PromiseFc(n.url).then(da => {\r\n\t\t\t\t\tn.url = da;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis.drawArr.push(\r\n\t\t\t\tnew dragGraph(\r\n\t\t\t\t\tObject.assign(\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tx: 30,\r\n\t\t\t\t\t\t\ty: 30\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tn\r\n\t\t\t\t\t),\r\n\t\t\t\t\tthis.ctx,\r\n\t\t\t\t\tthis.factor\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t\tthis.draw(); // 参数有变化时记录历史\r\n\r\n\t\t\tthis.recordHistory();\r\n\t\t},\r\n\r\n\t\tinitByArr(newArr) {\r\n\t\t\tthis.drawArr = []; // 重置绘画元素\r\n\r\n\t\t\tthis.initBg(); // 重置绘画背景\r\n\t\t\t// 循环插入 drawArr\r\n\r\n\t\t\tnewArr.forEach((item, index) => {\r\n\t\t\t\tswitch (item.type) {\r\n\t\t\t\t\tcase 'bgColor':\r\n\t\t\t\t\t\tthis.bgImage = '';\r\n\t\t\t\t\t\tthis.bgSourceId = '';\r\n\t\t\t\t\t\tthis.bgColor = item.color;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'bgImage':\r\n\t\t\t\t\t\tthis.bgColor = '';\r\n\t\t\t\t\t\tthis.bgImage = item.url;\r\n\r\n\t\t\t\t\t\tif (item.sourceId) {\r\n\t\t\t\t\t\t\tthis.bgSourceId = item.sourceId;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'image':\r\n\t\t\t\t\tcase 'text':\r\n\t\t\t\t\t\tif (index === newArr.length - 1) {\r\n\t\t\t\t\t\t\titem.selected = true;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\titem.selected = false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis.drawArr.push(new dragGraph(item, this.ctx, this.factor));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.draw();\r\n\t\t},\r\n\r\n\t\tdraw() {\r\n\t\t\tif (this.bgImage !== '') {\r\n\t\t\t\tthis.ctx.drawImage(this.bgImage, 0, 0, this.toPx(this.width), this.toPx(this.height));\r\n\t\t\t}\r\n\r\n\t\t\tif (this.bgColor !== '') {\r\n\t\t\t\tthis.ctx.save();\r\n\t\t\t\tthis.ctx.setFillStyle(this.bgColor);\r\n\t\t\t\tthis.ctx.fillRect(0, 0, this.toPx(this.width), this.toPx(this.height));\r\n\t\t\t\tthis.ctx.restore();\r\n\t\t\t}\r\n\r\n\t\t\tthis.drawArr.forEach(item => {\r\n\t\t\t\titem.paint();\r\n\t\t\t});\r\n\t\t\treturn new Promise(resolve => {\r\n\t\t\t\tthis.ctx.draw(false, () => {\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tstart(e) {\r\n\t\t\tisMove = false; // 重置移动标识\r\n\r\n\t\t\tconst { x, y } = e.touches[0];\r\n\t\t\tthis.tempGraphArr = [];\r\n\t\t\tlet lastDelIndex = null; // 记录最后一个需要删除的索引\r\n\r\n\t\t\tthis.drawArr &&\r\n\t\t\t\tthis.drawArr.forEach((item, index) => {\r\n\t\t\t\t\tconst action = item.isInGraph(x, y);\r\n\r\n\t\t\t\t\tif (action) {\r\n\t\t\t\t\t\titem.action = action;\r\n\t\t\t\t\t\tthis.tempGraphArr.push(item); // 保存点击时的坐标\r\n\r\n\t\t\t\t\t\tthis.currentTouch = {\r\n\t\t\t\t\t\t\tx,\r\n\t\t\t\t\t\t\ty\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\tif (action === 'del') {\r\n\t\t\t\t\t\t\tlastDelIndex = index; // 标记需要删除的元素\r\n\t\t\t\t\t\t\titem.selected = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\titem.action = false;\r\n\t\t\t\t\t\titem.selected = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}); // 保存点击时元素的信息\r\n\r\n\t\t\tif (this.tempGraphArr.length > 0) {\r\n\t\t\t\tfor (let i = 0; i < this.tempGraphArr.length; i++) {\r\n\t\t\t\t\tlet lastIndex = this.tempGraphArr.length - 1; // 对最后一个元素做操作\r\n\r\n\t\t\t\t\tif (i === lastIndex) {\r\n\t\t\t\t\t\t// 未选中的元素，不执行删除和缩放操作\r\n\t\t\t\t\t\tif (lastDelIndex !== null && this.tempGraphArr[i].selected) {\r\n\t\t\t\t\t\t\tif (this.drawArr[lastDelIndex].action == 'del') {\r\n\t\t\t\t\t\t\t\tthis.drawArr.splice(lastDelIndex, 1);\r\n\t\t\t\t\t\t\t\tthis.ctx.clearRect(0, 0, this.toPx(this.width), this.toPx(this.height));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.tempGraphArr[lastIndex].selected = true;\r\n\t\t\t\t\t\t\tthis.currentGraph = Object.assign({}, this.tempGraphArr[lastIndex]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// 不是最后一个元素，不需要选中，也不记录状态\r\n\t\t\t\t\t\tthis.tempGraphArr[i].action = false;\r\n\t\t\t\t\t\tthis.tempGraphArr[i].selected = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.draw();\r\n\t\t},\r\n\r\n\t\tmove(e) {\r\n\t\t\tconst { x, y } = e.touches[0];\r\n\r\n\t\t\tif (this.tempGraphArr && this.tempGraphArr.length > 0) {\r\n\t\t\t\tisMove = true; // 有选中元素，并且有移动时，设置移动标识\r\n\r\n\t\t\t\tconst currentGraph = this.tempGraphArr[this.tempGraphArr.length - 1];\r\n\r\n\t\t\t\tif (currentGraph.action === 'move') {\r\n\t\t\t\t\tcurrentGraph.centerX = this.currentGraph.centerX + (x - this.currentTouch.x);\r\n\t\t\t\t\tcurrentGraph.centerY = this.currentGraph.centerY + (y - this.currentTouch.y); // 使用中心点坐标计算位移，不使用 x,y 坐标，因为会受旋转影响。\r\n\r\n\t\t\t\t\tif (currentGraph.type !== 'text') {\r\n\t\t\t\t\t\tcurrentGraph.x = currentGraph.centerX - this.currentGraph.w / 2;\r\n\t\t\t\t\t\tcurrentGraph.y = currentGraph.centerY - this.currentGraph.h / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (currentGraph.action === 'transform') {\r\n\t\t\t\t\tcurrentGraph.transform(this.currentTouch.x, this.currentTouch.y, x, y, this.currentGraph);\r\n\t\t\t\t} // 更新4个坐标点（相对于画布的坐标系）\r\n\r\n\t\t\t\tcurrentGraph._rotateSquare();\r\n\r\n\t\t\t\tthis.draw();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tend(e) {\r\n\t\t\tthis.tempGraphArr = [];\r\n\r\n\t\t\tif (isMove) {\r\n\t\t\t\tisMove = false; // 重置移动标识\r\n\t\t\t\t// 用户操作结束时记录历史\r\n\r\n\t\t\t\tthis.recordHistory();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\texportFun() {\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\tthis.drawArr = this.drawArr.map(item => {\r\n\t\t\t\t\titem.selected = false;\r\n\t\t\t\t\treturn item;\r\n\t\t\t\t});\r\n\t\t\t\tthis.draw().then(() => {\r\n\t\t\t\t\twx.canvasToTempFilePath(\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcanvasId: 'canvas-drag',\r\n\t\t\t\t\t\t\tsuccess: res => {\r\n\t\t\t\t\t\t\t\tresolve(res.tempFilePath);\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tfail: e => {\r\n\t\t\t\t\t\t\t\treject(e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tthis\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\texportJson() {\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\tlet exportArr = this.drawArr.map(item => {\r\n\t\t\t\t\titem.selected = false;\r\n\r\n\t\t\t\t\tswitch (item.type) {\r\n\t\t\t\t\t\tcase 'image':\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\ttype: 'image',\r\n\t\t\t\t\t\t\t\turl: item.fileUrl,\r\n\t\t\t\t\t\t\t\ty: item.y,\r\n\t\t\t\t\t\t\t\tx: item.x,\r\n\t\t\t\t\t\t\t\tw: item.w,\r\n\t\t\t\t\t\t\t\th: item.h,\r\n\t\t\t\t\t\t\t\trotate: item.rotate,\r\n\t\t\t\t\t\t\t\tsourceId: item.sourceId\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'text':\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\t\t\t\ttext: item.text,\r\n\t\t\t\t\t\t\t\tcolor: item.color,\r\n\t\t\t\t\t\t\t\tfontSize: item.fontSize,\r\n\t\t\t\t\t\t\t\ty: item.y,\r\n\t\t\t\t\t\t\t\tx: item.x,\r\n\t\t\t\t\t\t\t\tw: item.w,\r\n\t\t\t\t\t\t\t\th: item.h,\r\n\t\t\t\t\t\t\t\trotate: item.rotate\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (this.bgImage) {\r\n\t\t\t\t\tlet tmp_img_config = {\r\n\t\t\t\t\t\ttype: 'bgImage',\r\n\t\t\t\t\t\turl: this.bgImage\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tif (this.bgSourceId) {\r\n\t\t\t\t\t\ttmp_img_config['sourceId'] = this.bgSourceId;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\texportArr.unshift(tmp_img_config);\r\n\t\t\t\t} else if (this.bgColor) {\r\n\t\t\t\t\texportArr.unshift({\r\n\t\t\t\t\t\ttype: 'bgColor',\r\n\t\t\t\t\t\tcolor: this.bgColor\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresolve(exportArr);\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tchangColor(color) {\r\n\t\t\tconst selected = this.drawArr.filter(item => item.selected);\r\n\r\n\t\t\tif (selected.length > 0) {\r\n\t\t\t\tselected[0].color = color;\r\n\t\t\t}\r\n\r\n\t\t\tthis.draw(); // 改变文字颜色时记录历史\r\n\r\n\t\t\tthis.recordHistory();\r\n\t\t},\r\n\r\n\t\tchangeBgColor(color) {\r\n\t\t\tthis.bgImage = '';\r\n\t\t\tthis.bgColor = color;\r\n\t\t\tthis.draw(); // 改变背景颜色时记录历史\r\n\r\n\t\t\tthis.recordHistory();\r\n\t\t},\r\n\r\n\t\tchangeBgImage(newBgImg) {\r\n\t\t\tthis.bgColor = '';\r\n\t\t\tif (typeof newBgImg == 'string') {\r\n\t\t\t\tthis.bgSourceId = '';\r\n\t\t\t\tdownloadFile_PromiseFc(newBgImg).then(da => {\r\n\t\t\t\t\tthis.bgImage = da;\r\n\t\t\t\t\tthis.draw(); // 改变背景图片时记录历史\r\n\r\n\t\t\t\t\tthis.recordHistory();\r\n\t\t\t\t});\r\n\t\t\t\t// this.bgImage = await downloadFile_PromiseFc(newBgImg);\r\n\t\t\t} else {\r\n\t\t\t\tthis.bgSourceId = newBgImg.sourceId;\r\n\t\t\t\tdownloadFile_PromiseFc(newBgImg.url).then(da => {\r\n\t\t\t\t\tthis.bgImage = da;\r\n\t\t\t\t\tthis.draw(); // 改变背景图片时记录历史\r\n\r\n\t\t\t\t\tthis.recordHistory();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tclearCanvas() {\r\n\t\t\tthis.ctx.clearRect(0, 0, this.toPx(this.width), this.toPx(this.height));\r\n\t\t\tthis.ctx.draw();\r\n\t\t\tthis.drawArr = [];\r\n\t\t\tthis.initBg(); // 重置绘画背景\r\n\r\n\t\t\tthis.initHistory(); // 清空历史记录\r\n\t\t}\r\n\t}\r\n};\r\n</script>\r\n<style>\r\n@import './index.css';\r\n</style>\n","import mod from \"-!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\mini-css-extract-plugin\\\\dist\\\\loader.js??ref--6-oneOf-1-0!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js??ref--6-oneOf-1-1!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\stylePostLoader.js!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--6-oneOf-1-2!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\postcss-loader\\\\src\\\\index.js??ref--6-oneOf-1-3!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./index.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\mini-css-extract-plugin\\\\dist\\\\loader.js??ref--6-oneOf-1-0!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js??ref--6-oneOf-1-1!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\stylePostLoader.js!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--6-oneOf-1-2!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\postcss-loader\\\\src\\\\index.js??ref--6-oneOf-1-3!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\软件\\\\HBuilderX.2.7.14.20200618\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./index.vue?vue&type=style&index=0&lang=css&\"","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1594543367672\n      var cssReload = require(\"D:/软件/HBuilderX.2.7.14.20200618/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"hmr\":true,\"publicPath\":\"../../\",\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"sourceRoot":""}